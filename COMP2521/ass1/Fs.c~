// Implementation of the File System ADT
// COMP2521 Assignment 1

// Written by: Jake Edwards
// Date:24/10/2021

#include <assert.h>
#include <ctype.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "FileType.h"
#include "Fs.h"
#include "utility.h"


struct FsRep {
    Tree Root;
    Tree CWD;
};


Fs FsNew(void) {
    Fs NewFs = malloc(sizeof(struct FsRep));
    if (NewFs == NULL) {
        fprintf(stderr, "error: out of memory\n");
        exit(EXIT_FAILURE);
    }
    //make paths "" and when printing add / prepended to each directory
    //GetNewTree(char *canonical_path,char* curr_path,char *parent_path,FileType tree_type,Tree parent_tree)
    Tree NewTree = GetNewTree("","","",DIRECTORY,NULL);
    NewFs->Root = NewTree;
    NewFs->CWD = NewTree;
    return NewFs;
}

void FsGetCwd(Fs fs, char cwd[PATH_MAX + 1]) {
    cwd = GetCanonicalPath(fs->CWD);
}

void FsFree(Fs fs) {
    // TODO
    
    if(fs->Root != NULL){
        //will path variabls in tree structs need to be mallocced and freed?
        FsFreeTree(fs->Root,fs->Root);
        free(fs);
    }
     
}
//want to make dirs inserted into list alphabetically
void FsMkdir(Fs fs, char *path) {
    // TODO
    
    //Return Path check for errors and handle finding path
    char *err_msg = "mkdir: cannot create directory";
    char *path_name_tail= NULL;
    
    //Q path is a q of strings delemiting the directory path
    Queue Q_PATH = ReturnQPath(path);
    //assign the tailing directory name to path_name_tail
    
    path_name_tail = GetPathNameTail(Q_PATH);

    Tree path_addr = ReturnTreeDir(fs->Root,path,err_msg,Q_PATH);
    if(path_addr != NULL){
        //make new tree
        //getNewRootTree(char *canonical_path,char* curr_path,char *parent_path,FileType tree_type)
        char *parent_path = GetParentPath(Q_PATH);
        char *canonical_path = NULL;
        canonical_path = strcat(canonical_path,parent_path);
        canonical_path = strcat(canonical_path,path_name_tail);
        Tree NewTree = GetNewTree(canonical_path,path_name_tail,parent_path,DIRECTORY,path_addr);
        //add new tree in alphabetical order inside path_address children if it matches a name at the same level free tree and print error of file exists
        AddTree(path_addr,NewTree,err_msg,path);
    }
    else {
        QueueFree(Q_PATH);
        return;
    }

    
    
    QueueFree(Q_PATH);
}

void FsMkfile(Fs fs, char *path) {
    // TODO
        
    //Return Path check for errors and handle finding path
    char *err_msg = "mkfile: cannot create file";
    char *path_name_tail = NULL;

    //Q path is a q of strings delemiting the directory path
    Queue Q_PATH = ReturnQPath(path);
    //assign the tailing directory name to path_name_tail
    strcpy(path_name_tail, GetPathNameTail(Q_PATH));

    Tree path_addr = ReturnTreeDir(fs->Root,path,err_msg,Q_PATH);
    if(path_addr != NULL){
        //make new tree
        //getNewRootTree(char *canonical_path,char* curr_path,char *parent_path,FileType tree_type)
        char *parent_path = GetParentPath(Q_PATH);
        char *canonical_path = NULL;
        canonical_path = strcat(canonical_path,parent_path);
        canonical_path = strcat(canonical_path,path_name_tail);
        Tree NewTree = GetNewTree(canonical_path,path_name_tail,parent_path,REGULAR_FILE,path_addr);
        //add new tree in alphabetical order inside path_address children if it matches a name at the same level free tree and print error of file exists
        AddTree(path_addr,NewTree,err_msg,path);
    }
    else {
        QueueFree(Q_PATH);
        return;
    }



    QueueFree(Q_PATH);
}

void FsCd(Fs fs, char *path) {
    // TODO
}

void FsLs(Fs fs, char *path) {
    // TODO
}

void FsPwd(Fs fs) {
    // TODO
}

void FsTree(Fs fs, char *path) {
    // TODO
}

void FsPut(Fs fs, char *path, char *content) {
    // TODO
}

void FsCat(Fs fs, char *path) {
    // TODO
}

void FsDldir(Fs fs, char *path) {
    // TODO
}

void FsDl(Fs fs, bool recursive, char *path) {
    // TODO
}

void FsCp(Fs fs, bool recursive, char *src[], char *dest) {
    // TODO
}

void FsMv(Fs fs, char *src[], char *dest) {
    // TODO
}


